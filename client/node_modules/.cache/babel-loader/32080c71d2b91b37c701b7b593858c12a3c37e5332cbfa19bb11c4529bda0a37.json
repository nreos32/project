{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  isAuthenticated: false,\n  isLoading: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    loginStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      localStorage.setItem('token', action.payload.token);\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      state.isAuthenticated = false;\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem('token');\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","user","token","localStorage","getItem","isAuthenticated","isLoading","error","authSlice","name","reducers","loginStart","state","loginSuccess","action","payload","setItem","loginFailure","logout","removeItem","actions","reducer"],"sources":["C:/Users/niko/Desktop/Github Clones/ptcg-playground-1/ptcg-playground-1/client/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    user: null,\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: false,\r\n    isLoading: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        loginStart: (state) => {\r\n            state.isLoading = true;\r\n            state.error = null;\r\n        },\r\n        loginSuccess: (state, action) => {\r\n            state.isLoading = false;\r\n            state.isAuthenticated = true;\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            localStorage.setItem('token', action.payload.token);\r\n        },\r\n        loginFailure: (state, action) => {\r\n            state.isLoading = false;\r\n            state.error = action.payload;\r\n            state.isAuthenticated = false;\r\n        },\r\n        logout: (state) => {\r\n            state.user = null;\r\n            state.token = null;\r\n            state.isAuthenticated = false;\r\n            localStorage.removeItem('token');\r\n        }\r\n    }\r\n});\r\n\r\nexport const { loginStart, loginSuccess, loginFailure, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC1BU,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACNC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACN,SAAS,GAAG,IAAI;MACtBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACtB,CAAC;IACDM,YAAY,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7BF,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACP,eAAe,GAAG,IAAI;MAC5BO,KAAK,CAACX,IAAI,GAAGa,MAAM,CAACC,OAAO,CAACd,IAAI;MAChCW,KAAK,CAACV,KAAK,GAAGY,MAAM,CAACC,OAAO,CAACb,KAAK;MAClCC,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEF,MAAM,CAACC,OAAO,CAACb,KAAK,CAAC;IACvD,CAAC;IACDe,YAAY,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC7BF,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACP,eAAe,GAAG,KAAK;IACjC,CAAC;IACDa,MAAM,EAAGN,KAAK,IAAK;MACfA,KAAK,CAACX,IAAI,GAAG,IAAI;MACjBW,KAAK,CAACV,KAAK,GAAG,IAAI;MAClBU,KAAK,CAACP,eAAe,GAAG,KAAK;MAC7BF,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IACpC;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,UAAU;EAAEE,YAAY;EAAEI,YAAY;EAAEC;AAAO,CAAC,GAAGV,SAAS,CAACY,OAAO;AACnF,eAAeZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}